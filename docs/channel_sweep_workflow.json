{
  "name": "Discord Channel Sweep",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 1
            }
          ]
        }
      },
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [120, 300],
      "id": "cron-trigger",
      "name": "Hourly Trigger"
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "select",
        "schema": {
          "value": "public"
        },
        "table": {
          "value": "bot_config"
        },
        "where": {
          "values": [
            {
              "column": "active",
              "condition": "equal",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [300, 300],
      "id": "get-config",
      "name": "Get Bot Config",
      "credentials": {
        "postgres": {
          "id": "postgres-creds",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const configs = $input.all();\nconst results = [];\n\nfor (const config of configs) {\n  const channelIds = config.json.channels_to_monitor || [];\n  const todoChannelId = config.json.todo_channel_id;\n  const lastSweepTime = config.json.last_sweep_time || new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString();\n  \n  for (const channelId of channelIds) {\n    results.push({\n      json: {\n        channel_id: channelId,\n        todo_channel_id: todoChannelId,\n        last_sweep_time: lastSweepTime,\n        guild_id: config.json.guild_id\n      }\n    });\n  }\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 300],
      "id": "process-configs",
      "name": "Process Configs"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "=https://discord.com/api/v10/channels/{{$json.channel_id}}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bot {{$env.DISCORD_BOT_TOKEN}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{$json.discord_message}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2340, 300],
      "id": "send-todo-update",
      "name": "Send ToDo Update"
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "update",
        "schema": {
          "value": "public"
        },
        "table": {
          "value": "bot_config"
        },
        "updateKey": "guild_id",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "last_sweep_time": "={{ $json.timestamp }}"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2560, 300],
      "id": "update-sweep-time",
      "name": "Update Sweep Time",
      "credentials": {
        "postgres": {
          "id": "postgres-creds",
          "name": "PostgreSQL"
        }
      }
    }
  ],
  "connections": {
    "Hourly Trigger": {
      "main": [
        [
          {
            "node": "Get Bot Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Bot Config": {
      "main": [
        [
          {
            "node": "Process Configs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Configs": {
      "main": [
        [
          {
            "node": "Fetch Channel Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Channel Messages": {
      "main": [
        [
          {
            "node": "Filter Actionable Messages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Actionable Messages": {
      "main": [
        [
          {
            "node": "Sweep AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sweep Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Sweep AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Sweep AI Model": {
      "ai_languageModel": [
        [
          {
            "node": "Sweep AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Sweep AI Agent": {
      "main": [
        [
          {
            "node": "Format Sweep Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Sweep Output": {
      "main": [
        [
          {
            "node": "Check Existing Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Existing Items": {
      "main": [
        [
          {
            "node": "Filter Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Duplicates": {
      "main": [
        [
          {
            "node": "Store Sweep Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Sweep Items": {
      "main": [
        [
          {
            "node": "Send ToDo Update",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send ToDo Update": {
      "main": [
        [
          {
            "node": "Update Sweep Time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": false,
    "saveExecutionProgress": false,
    "saveDataErrorExecution": "none",
    "saveDataSuccessExecution": "none"
  }
}": [
            {
              "name": "Authorization",
              "value": "Bot {{$env.DISCORD_BOT_TOKEN}}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "100"
            },
            {
              "name": "after",
              "value": "={{Math.floor(new Date($json.last_sweep_time).getTime() / 1000)}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [720, 300],
      "id": "fetch-messages",
      "name": "Fetch Channel Messages"
    },
    {
      "parameters": {
        "jsCode": "const messages = $json.body || [];\nconst channelId = $json.channel_id;\nconst todoChannelId = $json.todo_channel_id;\n\nif (!Array.isArray(messages) || messages.length === 0) {\n  return [];\n}\n\n// Filter messages that might contain action items\nconst actionableMessages = messages.filter(msg => {\n  const content = msg.content?.toLowerCase() || '';\n  return content.includes('todo') || \n         content.includes('action') || \n         content.includes('task') || \n         content.includes('follow up') || \n         content.includes('remind') || \n         content.includes('deadline') || \n         content.includes('due') || \n         content.includes('need to') || \n         content.includes('should') || \n         content.includes('must');\n});\n\nif (actionableMessages.length === 0) {\n  return [];\n}\n\n// Convert to chat format\nconst chatInput = actionableMessages.map(msg => \n  `${msg.author.username}: ${msg.content}`\n).join('\\n');\n\nreturn [{\n  json: {\n    chatInput,\n    channel_id: channelId,\n    todo_channel_id: todoChannelId,\n    message_count: actionableMessages.length,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [940, 300],
      "id": "filter-actionable",
      "name": "Filter Actionable Messages"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"summary\": \"string\",\n  \"action_items\": \"array\",\n  \"priority\": \"string\",\n  \"category\": \"string\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [1320, 500],
      "id": "sweep-output-parser",
      "name": "Sweep Output Parser"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [1160, 500],
      "id": "sweep-ai-model",
      "name": "Sweep AI Model",
      "credentials": {
        "openRouterApi": {
          "id": "TGntxwfXCaDdzoK0",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an executive assistant analyzing Discord messages for action items and tasks.\n\nAnalyze these messages for actionable items:\n{{ $json.chatInput }}\n\nExtract only genuine action items, tasks, and follow-ups that require attention. Ignore:\n- Casual mentions\n- Already completed tasks\n- Duplicate items\n- Non-actionable statements\n\nFocus on:\n- Specific tasks to be done\n- Deadlines and commitments\n- Follow-up actions required\n- Assigned responsibilities\n\nReturn your response as a JSON object:\n{\n  \"summary\": \"Brief summary of actionable items found\",\n  \"action_items\": [\"Specific actionable task 1\", \"Specific actionable task 2\"],\n  \"priority\": \"low|medium|high\",\n  \"category\": \"meeting|project|general|urgent\"\n}\n\nIf no genuine action items are found, return an empty array for action_items.",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [1160, 300],
      "id": "sweep-ai-agent",
      "name": "Sweep AI Agent"
    },
    {
      "parameters": {
        "jsCode": "const actionItems = Array.isArray($json.output?.action_items) ? $json.output.action_items : [];\n\nif (actionItems.length === 0) {\n  return [];\n}\n\nconst summary = $json.output?.summary || 'New action items found.';\nconst priority = $json.output?.priority || 'medium';\nconst category = $json.output?.category || 'general';\n\n// Check if these action items already exist\nconst actionItemId = require('crypto').randomBytes(8).toString('hex');\nconst timestamp = new Date().toISOString();\n\nconst discordMessage = `🔄 **Sweep Update - ${new Date().toLocaleString()}**\\n\\n**Summary:** ${summary}\\n\\n**New Action Items:**\\n${actionItems.map((item, index) => `${index + 1}. ${item}`).join('\\n')}\\n\\n*Priority: ${priority} | Category: ${category}*`;\n\nreturn [{\n  json: {\n    discord_message: discordMessage,\n    action_items: actionItems,\n    summary,\n    priority,\n    category,\n    action_item_id: actionItemId,\n    source_channel_id: $json.channel_id,\n    todo_channel_id: $json.todo_channel_id,\n    timestamp\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1480, 300],
      "id": "format-sweep-output",
      "name": "Format Sweep Output"
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "select",
        "schema": {
          "value": "public"
        },
        "table": {
          "value": "action_items"
        },
        "where": {
          "values": [
            {
              "column": "channel_id",
              "condition": "equal",
              "value": "={{ $json.source_channel_id }}"
            },
            {
              "column": "created_at",
              "condition": "isNotNull"
            }
          ]
        },
        "limit": 50,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1700, 300],
      "id": "check-existing-items",
      "name": "Check Existing Items",
      "credentials": {
        "postgres": {
          "id": "postgres-creds",
          "name": "PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const currentItems = $json.action_items || [];\nconst existingItems = $input.all().map(item => JSON.parse(item.json.action_items || '[]')).flat();\n\n// Filter out duplicates (simple text matching)\nconst newItems = currentItems.filter(item => \n  !existingItems.some(existing => \n    existing.toLowerCase().includes(item.toLowerCase()) || \n    item.toLowerCase().includes(existing.toLowerCase())\n  )\n);\n\nif (newItems.length === 0) {\n  return [];\n}\n\n// Update the message with only new items\nconst updatedMessage = $json.discord_message.replace(\n  /\\*\\*New Action Items:\\*\\*\\n[\\s\\S]*?\\n\\n/,\n  `**New Action Items:**\\n${newItems.map((item, index) => `${index + 1}. ${item}`).join('\\n')}\\n\\n`\n);\n\nreturn [{\n  json: {\n    ...$json,\n    action_items: newItems,\n    discord_message: updatedMessage\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1900, 300],
      "id": "filter-duplicates",
      "name": "Filter Duplicates"
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "insert",
        "schema": {
          "value": "public"
        },
        "table": {
          "value": "action_items"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.action_item_id }}",
            "channel_id": "={{ $json.source_channel_id }}",\n            "summary": "={{ $json.summary }}",\n            "action_items": "={{ JSON.stringify($json.action_items) }}",\n            "priority": "={{ $json.priority }}",\n            "category": "={{ $json.category }}",\n            "created_at": "={{ $json.timestamp }}",\n            "processed": true,\n            "source_type": "sweep"\n          }\n        },\n        "options": {}\n      },\n      "type": "n8n-nodes-base.postgres",\n      "typeVersion": 2.4,\n      "position": [2120, 300],\n      "id": "store-sweep-items",\n      "name": "Store Sweep Items",\n      "credentials": {\n        "postgres": {\n          "id": "postgres-creds",\n          "name": "PostgreSQL"\n        }\n      }\n    },\n    {\n      "parameters": {\n        "method": "POST",\n        "url": "=https://discord.com/api/v10/channels/{{$json.todo_channel_id}}/messages",\n        "sendHeaders": true,\n        "headerParameters": {\n          "parameters