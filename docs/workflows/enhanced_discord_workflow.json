{
  "name": "Enhanced Discord Bot",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "discord-ai-ingest",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [32, 256],
      "id": "2bd21887-a60c-4ebe-bc9a-89512929ad12",
      "name": "Discord Message RX",
      "webhookId": "ae0d7949-9d6c-4e52-800c-4b50fa853fa4"
    },
    {
      "parameters": {
        "jsCode": "const body = $json.body || $json;\nconst messages = body.messages || [];\n\n// Check for privacy flag\nconst isPrivateMode = body.private_mode || false;\n\n// Handle case where there might be a single message instead of array\nif (!Array.isArray(messages) && body.content) {\n  const singleMessage = {\n    user: body.author?.username || body.user || 'Unknown User',\n    text: body.content\n  };\n  const chatInput = `${singleMessage.user}: ${singleMessage.text}`;\n  \n  return [{\n    json: {\n      chatInput,\n      isPrivateMode,\n      metadata: {\n        channel_id: body.channel_id,\n        user_id: body.user_id || body.author?.id,\n        hours: body.hours,\n        message_count: 1,\n        timestamp: new Date().toISOString()\n      }\n    }\n  }];\n}\n\n// Handle array of messages\nconst chatInput = messages.map(m => `${m.user}: ${m.text}`).join('\\n');\n\nreturn [{\n  json: {\n    chatInput,\n    isPrivateMode,\n    metadata: {\n      channel_id: body.channel_id,\n      user_id: body.user_id,\n      hours: body.hours,\n      message_count: messages.length,\n      timestamp: new Date().toISOString()\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [240, 256],
      "id": "486e8687-1743-426e-bafe-307d482c6d87",
      "name": "Message Parser"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "privacy_check",
              "leftValue": "={{ $json.isPrivateMode }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [440, 256],
      "id": "privacy-check",
      "name": "Privacy Check"
    },
    {
      "parameters": {
        "jsCode": "// For private mode: hash or anonymize sensitive data\nconst crypto = require('crypto');\n\n// Create anonymized version of chat input\nconst anonymizedInput = $json.chatInput\n  .replace(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g, '[EMAIL]')\n  .replace(/\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b/g, '[PHONE]')\n  .replace(/\\b\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}[-\\s]?\\d{4}\\b/g, '[CARD]');\n\n// Hash user identifiers\nconst hashedUserId = crypto.createHash('sha256').update($json.metadata.user_id.toString()).digest('hex').substring(0, 8);\n\nreturn [{\n  json: {\n    chatInput: anonymizedInput,\n    metadata: {\n      ...$json.metadata,\n      user_id: hashedUserId,\n      privacy_mode: true\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [640, 160],
      "id": "data-anonymizer",
      "name": "Data Anonymizer"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"summary\": \"string\",\n  \"action_items\": \"array\",\n  \"priority\": \"string\",\n  \"category\": \"string\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [880, 720],
      "id": "06ad8cb4-8de8-4dfe-aef8-befd8f04c0ab",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "jsCode": "const actionItems = Array.isArray($json.output?.action_items) ? $json.output.action_items : [];\nconst summary = $json.output?.summary || 'No summary generated.';\nconst priority = $json.output?.priority || 'medium';\nconst category = $json.output?.category || 'general';\n\n// Generate unique ID for this set of action items\nconst actionItemId = require('crypto').randomBytes(8).toString('hex');\n\n// Create formatted Discord message\nconst discordMessage = `**Summary:**\\n${summary}\\n\\n**Action Items:**\\n${actionItems.length ? actionItems.map((item, index) => `${index + 1}. ${item}`).join('\\n') : 'No action items identified.'}\\n\\n*Priority: ${priority} | Category: ${category}*`;\n\nreturn [{\n  json: {\n    discord_message: discordMessage,\n    action_items: actionItems,\n    summary,\n    priority,\n    category,\n    action_item_id: actionItemId,\n    metadata: $json.metadata\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 400],
      "id": "7e34d62e-2bd2-43c6-9a30-d2538bba3b84",
      "name": "Response Formatter"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [720, 720],
      "id": "5119538e-3e17-4fc0-b68c-4e4e8daa9d71",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "TGntxwfXCaDdzoK0",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [1040, 400],
      "id": "4146c712-6d9f-4b27-838c-01e163141365",
      "name": "Merge Results"
    },
    {
      "parameters": {
        "jsCode": "// Pass through metadata for merging\nreturn [{\n  json: {\n    metadata: $json.metadata\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [880, 300],
      "id": "1a8987c9-f109-45a7-bef9-481c4fee62f9",
      "name": "Metadata Passthrough"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://discord.com/api/v10/channels/{{$json.metadata.channel_id}}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bot {{$env.DISCORD_BOT_TOKEN}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "content",
              "value": "={{$json.discord_message}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1560, 400],
      "id": "34ee3ad7-bc08-4a78-8ce5-cf1e7d8f0743",
      "name": "Discord Message TX"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an executive assistant that analyzes Discord conversations and provides summaries with action items.\n\nAnalyze this conversation:\n{{ $json.chatInput }}\n\nProvide a concise summary of the key points discussed and identify any follow-up tasks or action items that need attention. Focus on:\n- Main topics and decisions\n- Tasks assigned or mentioned\n- Important deadlines or commitments\n- Key information that should be remembered\n\nAlso categorize the conversation and assign a priority level (low, medium, high) based on urgency and importance.\n\nReturn your response as a JSON object with this exact structure:\n{\n  \"summary\": \"Brief summary of the conversation highlighting key points and decisions\",\n  \"action_items\": [\"Specific actionable task 1\", \"Specific actionable task 2\"],\n  \"priority\": \"low|medium|high\",\n  \"category\": \"meeting|project|general|urgent\"\n}\n\nIf no action items are identified, return an empty array for action_items. Only return the JSON object, nothing else.",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [640, 500],
      "id": "f91f09b1-a8d4-452e-9602-850cb46daf28",
      "name": "AI Conversation Analyzer"
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "insert",
        "schema": {
          "value": "public"
        },
        "table": {
          "value": "action_items"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $json.action_item_id }}",
            "channel_id": "={{ $json.metadata.channel_id }}",
            "summary": "={{ $json.summary }}",
            "action_items": "={{ JSON.stringify($json.action_items) }}",
            "priority": "={{ $json.priority }}",
            "category": "={{ $json.category }}",
            "created_at": "={{ $json.metadata.timestamp }}",
            "processed": false
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1400, 400],
      "id": "action-item-storage",
      "name": "Store Action Items",
      "credentials": {
        "postgres": {
          "id": "postgres-creds",
          "name": "PostgreSQL"
        }
      }
    }
  ],
  "connections": {
    "Discord Message RX": {
      "main": [
        [
          {
            "node": "Message Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Parser": {
      "main": [
        [
          {
            "node": "Privacy Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Privacy Check": {
      "main": [
        [
          {
            "node": "Data Anonymizer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Conversation Analyzer",
            "type": "main",
            "index": 0
          },
          {
            "node": "Metadata Passthrough",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Anonymizer": {
      "main": [
        [
          {
            "node": "AI Conversation Analyzer",
            "type": "main",
            "index": 0
          },
          {
            "node": "Metadata Passthrough",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Conversation Analyzer",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Response Formatter": {
      "main": [
        [
          {
            "node": "Store Action Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Conversation Analyzer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Merge Results": {
      "main": [
        [
          {
            "node": "Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Metadata Passthrough": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Conversation Analyzer": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Store Action Items": {
      "main": [
        [
          {
            "node": "Discord Message TX",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": false,
    "saveExecutionProgress": false,
    "saveDataErrorExecution": "none",
    "saveDataSuccessExecution": "none"
  }
}